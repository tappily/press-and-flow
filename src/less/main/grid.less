@import 'lib';
@import 'util';
@import 'flow';
@import 'var';

.grid {
  .flow;
}

.grid-offset(@value) when(@text-writing-direction = ltr) {
  margin-left: @value;
}

.grid-offset(@value) when(@text-writing-direction = rtl) {
  margin-right: @value;
}

.grid-col-break() {
  .flow-writing-init();
  clear: @flow-start;
}

.grid-col {
  .flow-start;

  .box-sizing(border-box);

  & ~ &:last-child:not(.grid-col-br) {
    .flow-end;
  }
}

.grid-br {
  .grid-col-break();
}

.grid-col-br {
  .grid-br;
}

.loop-mix-in(@selector, @index, @from, @to) when (@selector = ' .grid') {
  @nested-col-width: 100% / @to;

  &-span-@{index} {
    width: @nested-col-width * @index;
  }

  &-offset-@{index} {
    .grid-offset(@nested-col-width * @index);
  }

}

.loop-mix-in(@selector, @index, @from, @to) when (@selector = '.grid') {
  @grid-col-width: 100% / @to;

  &-span-@{index} {
    width: @grid-col-width * @index;
    .loop(1, (@index - @from + 1), ' .grid', '-', none);
  }

  &-offset-@{index} {
    .grid-offset(@grid-col-width * @index);
    .loop(1, (@index - @from + 1), ' .grid', '-', none);
  }

}

.loop(1, @grid-col-count, '.grid', '-', none);
