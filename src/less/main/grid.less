@import 'lib';
@import 'util';
@import 'flow';
@import 'var';

.grid {
  .flow;
}

.grid-offset(@value) when(@text-writing-direction = ltr) {
  margin-left: @value;
}

.grid-offset(@value) when(@text-writing-direction = rtl) {
  margin-right: @value;
}

.grid-offset-reset() when(@text-writing-direction = ltr) {
  margin-left: 0;
}

.grid-offset-reset() when(@text-writing-direction = rtl) {
  margin-right: 0;
}


.grid-col {
  .flow-start;

  box-sizing: border-box;

  & ~ &:last-child:not(.grid-col-br) {
    .flow-end;
  }
}

.grid-col-break() {
  .flow-writing-init();
  clear: @flow-start;
}

.grid-col-span-reset {
  clear: both;
  width: auto;
  float: none;
}

.grid-br {
  .grid-col-break();
}

.grid-col-br {
  .grid-br;
}

.loop-mix-in(@selector, @index, @from, @to) when (@selector = ' .grid') {
  @nested-col-width: 100% / @to;

  &-span-@{index} {
    width: @nested-col-width * @index;
  }

  &-offset-@{index} {
    .grid-offset(@nested-col-width * @index);
  }
}

.loop-mix-in(@selector, @index, @from, @to) when (@selector = '.grid-') {
  @grid-col-width: 100% / @to;

  @media screen and (max-width:(ceil(@grid-width-target - @grid-width-target * (unit(@grid-col-width) * @index / 100)))) {
    &span-@{index}, .grid-col &span-@{index}, &col ~ &span-@{index}:last-child:not(.grid-col-br) {
      .grid-col-span-reset;
    }

    &offset-@{index}, .grid-col &offset-@{index} {
      .grid-offset-reset;
    }

  }

}

.loop-mix-in(@selector, @index, @from, @to) when (@selector = '.grid') {
  @grid-col-width: 100% / @to;

  &-span-@{index} {

    width: @grid-col-width * @index;

    .loop(1, (@index - @from + 1), ' .grid', '-', none);

  }

  &-offset-@{index} {

    .grid-offset(@grid-col-width * @index);

    .loop(1, (@index - @from + 1), ' .grid', '-', none);

  }

}

.loop(1, @grid-col-count, '.grid', '-', none);

.loop(1, @grid-col-count, '.grid-', '-', none);
