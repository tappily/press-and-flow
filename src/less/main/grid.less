@import 'lib';
@import 'flow';
@import 'var';

.grid {
  .flow;
  margin-left: @grid-margin;
  margin-right: @grid-margin;
}

.grid-col-gap(@amount) when(@text-writing-direction = ltr) {
  margin-left: @amount;
}

.grid-col-gap(@amount) when(@text-writing-direction = rtl) {
  margin-right: @amount;
}

.grid-col-break() {
  .flow-writing-init();
  clear: @flow-start;
}

.grid-col {
  .flow-start;
  .grid-col-gap(@grid-col-gap);
}

.grid-br {
  .grid-col-break();
}

.grid-col-br {
  .grid-br;
  .grid-col-gap(0);
}

.loop-mix-in(@selector, @index, @from, @to) when (@selector = '.grid') {

  @gap: @grid-col-gap * @grid-col-count / @to;
  @gap-sum: @gap * (@index - @from);

  &-span-@{index} {
    width: ((100% - @gap-sum) / @to) * @index;
  }

}

.loop-mix-in(@selector, @index, @from, @to) when (@selector = '.grid-span') {

  &-@{index} {
    @gap-sum: @grid-col-gap * (@index - @from);
    width: @grid-col-width * @index + @gap-sum;

    .grid {

      &-col {
        .grid-col-gap(@grid-col-gap * (@grid-col-count / @index));
      }

      &-col-br {
        .grid-col-gap(0);
      }

    }

    .loop(1, (@index - @from + 1), '.grid', '-', none);

  }

}

.loop(1, @grid-col-count, '.grid-span', '-', none);
